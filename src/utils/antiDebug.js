const isDevelopment = process.env.NODE_ENV === 'development';let debuggerDetected = false;const initialize = () => {  if (isDevelopment) {    console.log('Anti-debug functions are disabled in development mode');    return;  }  try {    if (typeof window === 'undefined' || typeof document === 'undefined') {      return;    }    detectDevToolsSafely();    handleKeyboardShortcuts();    obfuscateSourceMap();    overrideErrorStack();    createFolderNoiseInStack();  } catch (error) {    console.warn('Lỗi khi khởi tạo anti-debug:', error);  }};const detectDevToolsSafely = () => {  try {    if (typeof window === 'undefined' || typeof document === 'undefined') return;    let slowExecutionDetected = false;    let warningDisplayed = false;    const safeDevToolsDetector = () => {      try {        const currentUrl = window.location.href;        const isAuthPath = currentUrl.includes('/login') ||                          currentUrl.includes('/register') ||                          currentUrl.includes('/auth') ||                          currentUrl.includes('/profile');        if (isAuthPath) {          return;        }        if (debuggerDetected) {          return;        }        const start = new Date();        const heavyOperation = () => {          let result = 0;          for (let i = 0; i < 100000; i++) {            result += Math.sqrt(i);          }          return result;        };        heavyOperation();        const end = new Date();        const executionTime = end - start;        if (executionTime > 200 && document.body) {          slowExecutionDetected = true;          if (!warningDisplayed) {            console.warn('Debug mode detected. Some features may be limited.');            warningDisplayed = true;            const warningElement = document.createElement('div');            warningElement.style.cssText = 'position:fixed;top:0;left:0;right:0;background:#f8d7da;color:#721c24;padding:10px;text-align:center;z-index:9999;font-size:14px;';            warningElement.innerHTML = 'Developer tools are active. Some features may be limited.';            warningElement.id = 'debug-warning';            if (!document.getElementById('debug-warning')) {              document.body.appendChild(warningElement);              setTimeout(() => {                const warning = document.getElementById('debug-warning');                if (warning) {                  warning.style.display = 'none';                }              }, 5000);            }          }        } else {          if (slowExecutionDetected && warningDisplayed) {            const warning = document.getElementById('debug-warning');            if (warning) {              warning.style.display = 'none';            }            warningDisplayed = false;            slowExecutionDetected = false;          }        }      } catch (error) {        console.warn('Lỗi trong safeDevToolsDetector:', error);      }    };    setInterval(safeDevToolsDetector, 3000);  } catch (error) {    console.warn('Lỗi trong detectDevToolsSafely:', error);  }};const handleKeyboardShortcuts = () => {  try {    if (typeof document === 'undefined') return;    document.addEventListener('keydown', (e) => {      const currentUrl = window.location.href;      const isAuthPath = currentUrl.includes('/login') ||                         currentUrl.includes('/register') ||                         currentUrl.includes('/auth') ||                         currentUrl.includes('/profile');      if (isAuthPath) {        return;      }      if (        (e.ctrlKey && e.key === 's') ||         (e.ctrlKey && e.key === 'u') ||         (e.ctrlKey && e.key === 'p') ||         (e.metaKey && e.altKey && e.key === 'i')       ) {        e.preventDefault();        return false;      }    });  } catch (error) {    console.warn('Lỗi trong handleKeyboardShortcuts:', error);  }};const obfuscateSourceMap = () => {  try {    const originalOnError = window.onerror;    window.onerror = function(message, source, lineno, colno, error) {      if (source && typeof source === 'string') {        const maskedSource = source          .replace(/[a-zA-Z]:\\.*\\src\\/g, 'app:          .replace(/\/src\          .replace(/webpack:\/\/.*/g, 'app:        if (originalOnError) {          return originalOnError.call(this, message, maskedSource, lineno, colno, error);        }      }      return false;    };    const originalEval = window.eval;    window.eval = function() {      try {        return originalEval.apply(this, arguments);      } catch (e) {        if (e && e.stack) {          e.stack = e.stack            .replace(/[a-zA-Z]:\\.*\\src\\/g, 'app:            .replace(/\/src\            .replace(/webpack:\/\/.*/g, 'app:        }        throw e;      }    };  } catch (error) {    console.warn('Lỗi khi ghi đè xử lý lỗi:', error);  }};const overrideErrorStack = () => {  try {    const originalStackDescriptor = Object.getOwnPropertyDescriptor(Error.prototype, 'stack');    if (originalStackDescriptor && originalStackDescriptor.configurable) {      Object.defineProperty(Error.prototype, 'stack', {        get: function() {          const originalStack = originalStackDescriptor.get.call(this);          return originalStack            ? originalStack                .replace(/[a-zA-Z]:\\.*\\src\\/g, 'app:                .replace(/\/src\                .replace(/webpack:\/\/.*/g, 'app:                .replace(/at\s+[a-zA-Z0-9]+\s+\(/g, 'at anonymous (')            : originalStack;        },        configurable: true      });    }  } catch (error) {    console.warn('Lỗi khi ghi đè Error.stack:', error);  }};const createFolderNoiseInStack = () => {  try {    const randomFolders = [      'app:      'app:      'app:      'app:      'app:    ];    const triggerFakeErrors = () => {      if (isDevelopment) return;      setTimeout(() => {        try {          const createFakeError = () => {            const err = new Error('Thread initialization failed');            const fakeFolder = randomFolders[Math.floor(Math.random() * randomFolders.length)];            Object.defineProperty(err, 'stack', {              value: `Error: Thread initialization failed    at ModuleLoader.init (${fakeFolder}loader.js:142:23)    at bootstrap (app:    at processTicksAndRejections (app:              configurable: true            });            return err;          };          console.debug('[System]', createFakeError());        } catch (e) {        }      }, 3000);    };    triggerFakeErrors();  } catch (error) {  }};export default {  initialize,  detectDevToolsSafely,  handleKeyboardShortcuts,  obfuscateSourceMap,  overrideErrorStack,  createFolderNoiseInStack};