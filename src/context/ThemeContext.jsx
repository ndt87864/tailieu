import React, { createContext, useContext, useState, useEffect } from 'react';import { auth } from '../firebase/firebase';import { getUserPreferences, saveUserPreferences } from '../firebase/firestoreService';export const THEME_COLORS = {  DEFAULT: 'theme-green',  BLUE: 'theme-blue',  RED: 'theme-red',  PURPLE: 'theme-purple',  YELLOW: 'theme-yellow',  BROWN: 'theme-brown',  BLACK: 'theme-black',  WHITE: 'theme-white'};const ThemeContext = createContext();export const useTheme = () => useContext(ThemeContext);export const ThemeProvider = ({ children }) => {  const [isDarkMode, setIsDarkMode] = useState(false);  const [themeColor, setThemeColor] = useState(THEME_COLORS.DEFAULT);  useEffect(() => {    const savedDarkMode = localStorage.getItem('darkMode') === 'true';    const savedThemeColor = localStorage.getItem('themeColor') || THEME_COLORS.DEFAULT;    setIsDarkMode(savedDarkMode);    setThemeColor(savedThemeColor);    if (savedDarkMode) {      document.documentElement.classList.add('dark');    } else {      document.documentElement.classList.remove('dark');    }    document.documentElement.className = document.documentElement.className      .replace(/theme-\w+/g, '')      .trim() + ' ' + savedThemeColor;  }, []);  useEffect(() => {    const saveThemePreferences = async () => {      const user = auth.currentUser;      if (user) {        try {          await saveUserPreferences(user.uid, {            darkMode: isDarkMode,            themeColor: themeColor,            updatedAt: new Date()          });          console.log("Theme preferences saved");        } catch (error) {          console.error("Error saving theme preferences:", error);        }      }    };    localStorage.setItem('darkMode', isDarkMode.toString());    localStorage.setItem('themeColor', themeColor);    saveThemePreferences();  }, [isDarkMode, themeColor]);  const toggleDarkMode = () => {    setIsDarkMode(prevMode => {      const newMode = !prevMode;      if (newMode) {        document.documentElement.classList.add('dark');      } else {        document.documentElement.classList.remove('dark');      }      return newMode;    });  };  const changeThemeColor = (color) => {    if (Object.values(THEME_COLORS).includes(color)) {      setThemeColor(color);      document.documentElement.className = document.documentElement.className        .replace(/theme-\w+/g, '')        .trim() + ' ' + color;    }  };  return (    <ThemeContext.Provider value={{       isDarkMode,       toggleDarkMode,       themeColor,       changeThemeColor,      THEME_COLORS     }}>      {children}    </ThemeContext.Provider>  );};export default ThemeContext;